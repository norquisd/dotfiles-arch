# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
global !p

# Define matrix size in terms of rows/columns
def mat(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	r = int_val(rows)
	c = int_val(cols)

	offset = c + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{matrix}\n"

	for i in range(r):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * c + j + offset) for j in range(c)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "\\end{matrix}\n$0"

	snip.expand_anon(final_str)
endglobal

# Function that lets you specificy an nxm matrix

pre_expand "mat(snip)"
snippet "fmat(\d+)x(\d+)" "Add matrix" br
endsnippet

snippet homework "Start a default homework document" b
\documentclass{article}
\usepackage{amsmath,amssymb,amsthm,mathrsfs,graphicx}


\title{$1 \\\\ $2}
\author{Quinten Norton\\\\University of Minnesota}
\date{Fall 2020}


\begin{document}

\maketitle

$3

\end{document}
endsnippet

snippet _ "subscript" iA
_\{$1\}$0
endsnippet

snippet ^ "exponent" iA
^\{$1\}$0
endsnippet

snippet ceil "Ceiling" i
\left \lceil \{$1\} \right \rceil $0
endsnippet

snippet floor "Floor" i
\left \lfloor \{$1\} \right \rfloor $0
endsnippet
